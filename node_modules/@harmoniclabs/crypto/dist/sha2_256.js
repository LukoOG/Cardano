"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasNativeSha2_256 = exports.sha2_256 = exports.sha2_256_sync = void 0;
var rotr32_1 = require("./utils/rotr32.js");
var hasGlobalWebCrypto_1 = require("./hasGlobalWebCrypto.js");
var __hasNativeSupport = hasGlobalWebCrypto_1.hasGlobalWebCrypto && typeof globalThis.crypto.subtle.digest === "function";
var NATIVE_ALGO = "SHA-256";
var digest = __hasNativeSupport ?
    globalThis.crypto.subtle.digest.bind(globalThis.crypto.subtle) :
    function () { return Promise.resolve(new ArrayBuffer(0)); };
function _test_nativeSha2_256(data) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = Uint8Array.bind;
                    return [4 /*yield*/, digest(NATIVE_ALGO, data)];
                case 1: 
                // await ensureNativeSupport();
                // if( !__hasNativeSupport ) return sha2_256_sync( data );
                return [2 /*return*/, new (_a.apply(Uint8Array, [void 0, _b.sent()]))()];
            }
        });
    });
}
function nativeSha2_256(data) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, ensureNativeSupport()];
                case 1:
                    _b.sent();
                    if (!__hasNativeSupport)
                        return [2 /*return*/, sha2_256_sync(data)];
                    _a = Uint8Array.bind;
                    return [4 /*yield*/, digest(NATIVE_ALGO, data)];
                case 2: return [2 /*return*/, new (_a.apply(Uint8Array, [void 0, _b.sent()]))()];
            }
        });
    });
}
function _test(data, uint8ArrayEq) {
    return __awaiter(this, void 0, void 0, function () {
        var start, end, nativeRestult, _a, nativeTime, result, jsTime, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!__hasNativeSupport)
                        return [2 /*return*/, [50, 1]];
                    start = 0;
                    end = 0;
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    start = performance.now();
                    _a = Uint8Array.bind;
                    return [4 /*yield*/, _test_nativeSha2_256(data)];
                case 2:
                    nativeRestult = new (_a.apply(Uint8Array, [void 0, _c.sent()]))();
                    end = performance.now();
                    nativeTime = end - start;
                    start = performance.now();
                    result = sha2_256_sync(data);
                    end = performance.now();
                    jsTime = end - start;
                    __hasNativeSupport = __hasNativeSupport && uint8ArrayEq(nativeRestult, result);
                    return [2 /*return*/, [nativeTime, jsTime]];
                case 3:
                    _b = _c.sent();
                    __hasNativeSupport = false;
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/, [50, 1]];
            }
        });
    });
}
var _support_was_tested = false;
function _test_support() {
    return __awaiter(this, void 0, void 0, function () {
        var repeatArr, eqU8Arr_1, bench, sum, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (_support_was_tested || !__hasNativeSupport)
                        return [2 /*return*/];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    repeatArr = function (arr, n) {
                        for (var i = 0; i < n; i++)
                            arr = arr.concat.apply(arr, __spreadArray([], __read(arr), false));
                        return arr;
                    };
                    eqU8Arr_1 = function (a, b) {
                        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array))
                            return false;
                        if (a.length !== b.length)
                            return false;
                        for (var i = 0; i < a.length; i++)
                            if (a[i] !== b[i])
                                return false;
                        return true;
                    };
                    return [4 /*yield*/, Promise.all(repeatArr([
                            new Uint8Array(0),
                            new Uint8Array(10),
                            new Uint8Array([0xde, 0xad, 0xbe, 0xef]),
                            new Uint8Array(repeatArr([0xaa], 20)),
                            new Uint8Array(repeatArr([0xbb], 20)),
                            new Uint8Array(repeatArr([0xcc], 20)),
                            new Uint8Array(repeatArr([0xdd], 20)),
                            new Uint8Array(repeatArr([0xee], 20)),
                            new Uint8Array(repeatArr([0xff], 20)),
                            new Uint8Array(repeatArr([0xaa, 0xbb], 33)),
                            new Uint8Array(repeatArr([0xbb, 0xcc], 33)),
                            new Uint8Array(repeatArr([0xcc, 0xdd], 33)),
                            new Uint8Array(repeatArr([0xdd, 0xee], 33)),
                            new Uint8Array(repeatArr([0xee, 0xff], 33)),
                            new Uint8Array(repeatArr([0xff, 0x00], 33)),
                            new Uint8Array(repeatArr([0xde, 0xad, 0xbe, 0xef], 30)),
                        ], 10)
                            .map(function (data) { return _test(data, eqU8Arr_1); }))];
                case 2:
                    bench = _b.sent();
                    if (!__hasNativeSupport)
                        return [2 /*return*/];
                    sum = bench.reduce(function (acc, _a) {
                        var _b = __read(_a, 2), native = _b[0], js = _b[1];
                        acc[0] += native;
                        acc[1] += js;
                        return acc;
                    }, [0, 0]);
                    __hasNativeSupport = __hasNativeSupport && sum[0] < sum[1];
                    return [3 /*break*/, 4];
                case 3:
                    _a = _b.sent();
                    __hasNativeSupport = false;
                    _support_was_tested = true;
                    return [3 /*break*/, 4];
                case 4:
                    _support_was_tested = true;
                    return [2 /*return*/];
            }
        });
    });
}
if (__hasNativeSupport) {
    _test_support();
}
else {
    _support_was_tested = true;
}
/**
 * There are cases where `globalThis.crypto.subtle` is fully defined
 * but the algorithm `Ed25519` is NOT SUPPORTED.
 *
 * unfortunately, there is NO WAY to check this syncronously.
 */
function ensureNativeSupport() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!__hasNativeSupport)
                        return [2 /*return*/, false];
                    return [4 /*yield*/, _test_support()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, __hasNativeSupport];
            }
        });
    });
}
/**
 * Pad a bytearray so its size is a multiple of 64 (512 bits).
 * Internal method.
 */
function pad(src) {
    var nBits = src.length * 8;
    var finalLen = src.length;
    // dst = src.slice();
    // dst.push(0x80);
    finalLen++;
    var nZeroes = (64 - (src.length + 1) % 64) - 8;
    if (nZeroes < 0) {
        nZeroes += 64;
    }
    // for (let i = 0; i < nZeroes; i++) {
    //     dst.push(0);
    // }
    finalLen += nZeroes;
    // assume nBits fits in 32 bits
    // dst.push(0);
    // dst.push(0);
    // dst.push(0);
    // dst.push(0);
    // dst.push( ((nBits >> 24) & 0xff) as byte);
    // dst.push( ((nBits >> 16) & 0xff) as byte);
    // dst.push( ((nBits >> 8)  & 0xff) as byte);
    // dst.push( ((nBits >> 0)  & 0xff) as byte);
    finalLen += 8;
    var dst = new Uint8Array(finalLen);
    dst.set(src);
    dst[src.length] = 0x80;
    dst[finalLen - 4] = (nBits >>> 24) & 0xff;
    dst[finalLen - 3] = (nBits >>> 16) & 0xff;
    dst[finalLen - 2] = (nBits >>> 8) & 0xff;
    dst[finalLen - 1] = nBits & 0xff;
    return dst;
}
var k = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
];
function sigma0(x) {
    return (0, rotr32_1.rotr32)(x, 7) ^ (0, rotr32_1.rotr32)(x, 18) ^ (x >>> 3);
}
function sigma1(x) {
    return (0, rotr32_1.rotr32)(x, 17) ^ (0, rotr32_1.rotr32)(x, 19) ^ (x >>> 10);
}
var initialHash = new Uint32Array([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19,
]);
/**
 * getulates sha2-256 (32bytes) hash of a list of uint8 numbers.
 * Result is also a list of uint8 number.
 * @example
 * bytesToHex(sha2_256([0x61, 0x62, 0x63])) => "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"
 * @example
 * sha2_256(textToBytes("Hello, World!")) => [223, 253, 96, 33, 187, 43, 213, 176, 175, 103, 98, 144, 128, 158, 195, 165, 49, 145, 221, 129, 199, 247, 10, 75, 40, 104, 138, 54, 33, 130, 152, 111]
 * @param {uint5[]} bytes - list of uint8 numbers
 * @returns {number[]} - list of uint8 numbers
 */
function sha2_256_sync(_bytes) {
    if (!(_bytes instanceof Uint8Array))
        _bytes = new Uint8Array(_bytes);
    if (_bytes instanceof ArrayBuffer)
        _bytes = new Uint8Array(_bytes);
    /**
     * Initial hash (updated during compression phase)
     */
    var hash = initialHash.slice();
    var bytes = pad(_bytes);
    // break message in successive 64 byte chunks
    for (var chunkStart = 0; chunkStart < bytes.length; chunkStart += 64) {
        var chunk = Uint8Array.prototype.slice.call(bytes, chunkStart, chunkStart + 64);
        // bytes.slice(chunkStart, chunkStart + 64);
        var w = new Int32Array(64); // (new Array(64)).fill(0); // array of 32 bit numbers!
        // copy chunk into first 16 positions of w
        for (var i = 0; i < 16; i++) {
            w[i] = (chunk[i * 4 + 0] << 24) |
                (chunk[i * 4 + 1] << 16) |
                (chunk[i * 4 + 2] << 8) |
                (chunk[i * 4 + 3]);
        }
        // this DOES NOT WORK
        // w.set( new Int32Array( chunk.buffer, chunk.byteOffset, 16 ) );
        // extends the first 16 positions into the remaining 48 positions
        for (var i = 16; i < 64; i++) {
            w[i] = (w[i - 16] + sigma0(w[i - 15]) + w[i - 7] + sigma1(w[i - 2])) | 0;
        }
        // intialize working variables to current hash value
        var a = hash[0];
        var b = hash[1];
        var c = hash[2];
        var d = hash[3];
        var e = hash[4];
        var f = hash[5];
        var g = hash[6];
        var h = hash[7];
        // compression function main loop
        for (var i = 0; i < 64; i++) {
            var S1 = (0, rotr32_1.rotr32)(e, 6) ^ (0, rotr32_1.rotr32)(e, 11) ^ (0, rotr32_1.rotr32)(e, 25);
            var ch = (e & f) ^ ((~e) & g);
            var temp1 = (h + S1 + ch + k[i] + w[i]) | 0;
            var S0 = (0, rotr32_1.rotr32)(a, 2) ^ (0, rotr32_1.rotr32)(a, 13) ^ (0, rotr32_1.rotr32)(a, 22);
            var maj = (a & b) ^ (a & c) ^ (b & c);
            var temp2 = (S0 + maj) | 0;
            h = g;
            g = f;
            f = e;
            e = (d + temp1) | 0;
            d = c;
            c = b;
            b = a;
            a = (temp1 + temp2) | 0;
        }
        // update the hash
        hash[0] = (hash[0] + a) | 0;
        hash[1] = (hash[1] + b) | 0;
        hash[2] = (hash[2] + c) | 0;
        hash[3] = (hash[3] + d) | 0;
        hash[4] = (hash[4] + e) | 0;
        hash[5] = (hash[5] + f) | 0;
        hash[6] = (hash[6] + g) | 0;
        hash[7] = (hash[7] + h) | 0;
    }
    // produce the final digest of uint8 numbers
    var result = new Uint8Array(32);
    for (var i = 0; i < 8; i++) {
        var item = hash[i];
        // result.push( ((item >> 24) & 0xff) as byte );
        // result.push( ((item >> 16) & 0xff) as byte );
        // result.push( ((item >>  8) & 0xff) as byte );
        // result.push( ((item >>  0) & 0xff) as byte );
        var i4 = i * 4;
        result[i4] = (item >>> 24) & 0xff;
        result[i4 + 1] = (item >>> 16) & 0xff;
        result[i4 + 2] = (item >>> 8) & 0xff;
        result[i4 + 3] = (item) & 0xff;
    }
    return result;
}
exports.sha2_256_sync = sha2_256_sync;
function wrapped_sha2_256_sync(data) {
    return Promise.resolve(sha2_256_sync(data));
}
exports.sha2_256 = __hasNativeSupport ? nativeSha2_256 : wrapped_sha2_256_sync;
exports.hasNativeSha2_256 = exports.sha2_256 === nativeSha2_256;
