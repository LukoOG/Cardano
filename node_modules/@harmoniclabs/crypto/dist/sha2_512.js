"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha2_512 = exports.sha2_512_sync = void 0;
var hasGlobalWebCrypto_1 = require("./hasGlobalWebCrypto.js");
var sha512_1 = require("./noble/sha512.js");
var __hasNativeSupport = hasGlobalWebCrypto_1.hasGlobalWebCrypto && typeof globalThis.crypto.subtle.digest === "function";
var NATIVE_ALGO = "SHA-512";
var digest = __hasNativeSupport ?
    globalThis.crypto.subtle.digest.bind(globalThis.crypto.subtle) :
    function () { return Promise.resolve(new ArrayBuffer(0)); };
function _test_nativeSha2_512(data) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = Uint8Array.bind;
                    return [4 /*yield*/, digest(NATIVE_ALGO, data)];
                case 1: 
                // await ensureNativeSupport();
                // if( !__hasNativeSupport ) return sha2_512_sync( data );
                return [2 /*return*/, new (_a.apply(Uint8Array, [void 0, _b.sent()]))()];
            }
        });
    });
}
function nativeSha2_512(data) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, ensureNativeSupport()];
                case 1:
                    _b.sent();
                    if (!__hasNativeSupport)
                        return [2 /*return*/, sha2_512_sync(data)];
                    _a = Uint8Array.bind;
                    return [4 /*yield*/, digest(NATIVE_ALGO, data)];
                case 2: return [2 /*return*/, new (_a.apply(Uint8Array, [void 0, _b.sent()]))()];
            }
        });
    });
}
function _test(data, uint8ArrayEq) {
    return __awaiter(this, void 0, void 0, function () {
        var start, end, nativeResult, _a, nativeTime, result, jsTime, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!__hasNativeSupport)
                        return [2 /*return*/, [50, 1]];
                    start = 0;
                    end = 0;
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    start = performance.now();
                    _a = Uint8Array.bind;
                    return [4 /*yield*/, _test_nativeSha2_512(data)];
                case 2:
                    nativeResult = new (_a.apply(Uint8Array, [void 0, _c.sent()]))();
                    end = performance.now();
                    nativeTime = end - start;
                    start = performance.now();
                    result = sha2_512_sync(data);
                    end = performance.now();
                    jsTime = end - start;
                    __hasNativeSupport = __hasNativeSupport && uint8ArrayEq(nativeResult, result);
                    return [2 /*return*/, [nativeTime, jsTime]];
                case 3:
                    _b = _c.sent();
                    __hasNativeSupport = false;
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/, [50, 1]];
            }
        });
    });
}
var _support_was_tested = false;
function _test_support() {
    return __awaiter(this, void 0, void 0, function () {
        var repeatArr, eqU8Arr_1, bench, sum, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (_support_was_tested || !__hasNativeSupport)
                        return [2 /*return*/];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    repeatArr = function (arr, n) {
                        for (var i = 0; i < n; i++)
                            arr = arr.concat.apply(arr, __spreadArray([], __read(arr), false));
                        return arr;
                    };
                    eqU8Arr_1 = function (a, b) {
                        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array))
                            return false;
                        if (a.length !== b.length)
                            return false;
                        for (var i = 0; i < a.length; i++)
                            if (a[i] !== b[i])
                                return false;
                        return true;
                    };
                    return [4 /*yield*/, Promise.all(repeatArr([
                            new Uint8Array(0),
                            new Uint8Array(10),
                            new Uint8Array([0xde, 0xad, 0xbe, 0xef]),
                            new Uint8Array(repeatArr([0xaa], 20)),
                            new Uint8Array(repeatArr([0xbb], 20)),
                            new Uint8Array(repeatArr([0xcc], 20)),
                            new Uint8Array(repeatArr([0xdd], 20)),
                            new Uint8Array(repeatArr([0xee], 20)),
                            new Uint8Array(repeatArr([0xff], 20)),
                            new Uint8Array(repeatArr([0xaa, 0xbb], 33)),
                            new Uint8Array(repeatArr([0xbb, 0xcc], 33)),
                            new Uint8Array(repeatArr([0xcc, 0xdd], 33)),
                            new Uint8Array(repeatArr([0xdd, 0xee], 33)),
                            new Uint8Array(repeatArr([0xee, 0xff], 33)),
                            new Uint8Array(repeatArr([0xff, 0x00], 33)),
                            new Uint8Array(repeatArr([0xde, 0xad, 0xbe, 0xef], 30)),
                        ], 10).map(function (data) { return _test(data, eqU8Arr_1); }))];
                case 2:
                    bench = _b.sent();
                    if (!__hasNativeSupport)
                        return [2 /*return*/];
                    sum = bench.reduce(function (acc, _a) {
                        var _b = __read(_a, 2), native = _b[0], js = _b[1];
                        acc[0] += native;
                        acc[1] += js;
                        return acc;
                    }, [0, 0]);
                    __hasNativeSupport = __hasNativeSupport && sum[0] < sum[1];
                    return [3 /*break*/, 4];
                case 3:
                    _a = _b.sent();
                    __hasNativeSupport = false;
                    return [3 /*break*/, 4];
                case 4:
                    _support_was_tested = true;
                    return [2 /*return*/];
            }
        });
    });
}
if (__hasNativeSupport) {
    _test_support();
}
else {
    _support_was_tested = true;
}
/**
 * There are cases where `globalThis.crypto.subtle` is fully defined
 * but the algorithm `Ed25519` is NOT SUPPORTED.
 *
 * unfortunately, there is NO WAY to check this syncronously.
 */
function ensureNativeSupport() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!__hasNativeSupport)
                        return [2 /*return*/, false];
                    return [4 /*yield*/, _test_support()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, __hasNativeSupport];
            }
        });
    });
}
/**
 * getulates sha2-512 (64bytes) hash of a list of uint8 numbers.
 * Result is also a list of uint8 number.
 * @example
 * bytesToHex(sha2_512_sync([0x61, 0x62, 0x63])) => "ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"
 * @example
 * bytesToHex(sha2_512_sync([])) => "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
 * @param {number[]} bytes - list of uint8 numbers
 * @returns {number[]} - list of uint8 numbers
 */
function sha2_512_sync(bytes) {
    if (!(bytes instanceof Uint8Array))
        bytes = new Uint8Array(bytes);
    if (bytes instanceof ArrayBuffer)
        bytes = new Uint8Array(bytes);
    return (0, sha512_1.sha512)(bytes);
}
exports.sha2_512_sync = sha2_512_sync;
function wrapped_sha2_512_sync(bytes) {
    return Promise.resolve(sha2_512_sync(bytes));
}
exports.sha2_512 = __hasNativeSupport ? nativeSha2_512 : wrapped_sha2_512_sync;
