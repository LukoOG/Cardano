"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bigintToBuffer = void 0;
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
function bigintToBuffer(bigint, nBytes) {
    if (nBytes === void 0) { nBytes = undefined; }
    if (bigint < BigInt(0))
        throw new Error("cannot convert negative bigint to buffer");
    if (typeof nBytes !== "number")
        nBytes = undefined;
    if (bigint === BigInt(0)) {
        if (nBytes === undefined)
            nBytes = 0;
        return new Uint8Array(nBytes);
    }
    var buffHexString = bigint.toString(16);
    buffHexString = buffHexString.length % 2 === 0 ? buffHexString : '0' + buffHexString;
    if (typeof nBytes === "number") {
        nBytes = Math.round(Math.abs(nBytes));
        buffHexString = buffHexString.padStart(nBytes * 2, "00");
        if (buffHexString.length > nBytes * 2)
            // only keep the last nBytes
            buffHexString = buffHexString.slice(buffHexString.length - (nBytes * 2));
    }
    return (0, uint8array_utils_1.fromHex)(buffHexString);
}
exports.bigintToBuffer = bigintToBuffer;
